/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null) return head;
        
        int len = getSize(head);
        
        int rotations = k % len;
        
        if (rotations == 0) return head;
        
        head = reverse(head, null);
        //display(head);
        
        ListNode tail1 = head;
        
        for(int i = 1; i < rotations; i++){
            tail1 = tail1.next;
        }
        
        ListNode head2 = head;
        
        for(int i = 1; i <= rotations; i++){
            head2 = head2.next;
        }
        //System.out.println("tail1 " + tail1.val);
        ListNode head1 = reverse(head, head2);
        //display(head1);
        
        head2 = reverse(head2, null);
        //display(head2);
        
        ListNode tail2 = head1;
        
        for(int i = 1; i < rotations; i++){
            tail2 = tail2.next;
        }
        
        tail2.next = head2;
        
        return head1;
    }
    
    public void display(ListNode p){
        while(p != null){
            System.out.print(p.val + " ");
            p = p.next;
        }
        System.out.println();
    }
    
    public ListNode reverse(ListNode head, ListNode tail){
        ListNode prev = null;
        ListNode pres = head;
        ListNode next = pres.next;
        
        while(pres != tail){
            pres.next = prev;
            prev = pres;
            pres = next;
            
            if (next != tail) next = next.next;
        }
        
        return prev;
        
    }
    
    public int getSize(ListNode p){
        int size = 0;
        while(p != null){
            p = p.next;
            size++;
        }
        return size;
    }
}
